#!/bin/bash

# test the github distribution in a container

# build the base container

docker build -t tensorcomtest-base - <<EOF
FROM ubuntu:19.10
ENV LC_ALL=C
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get -qqy update
RUN apt-get install -qqy git
RUN apt-get install -qqy python3
RUN apt-get install -qqy python3-pip
RUN apt-get install -qqy python3-venv
RUN apt-get install -qqy curl
WORKDIR /tmp
RUN python3 -m venv venv
RUN . venv/bin/activate; pip3 install --no-cache-dir pytest
RUN . venv/bin/activate; pip3 install --no-cache-dir numpy
RUN . venv/bin/activate; pip3 install --no-cache-dir nbconvert
#RUN . venv/bin/activate; pip3 install --no-cache-dir torch
#RUN . venv/bin/activate; pip3 install --no-cache-dir torchvision
RUN . venv/bin/activate; pip3 install --no-cache-dir torch==1.4.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
RUN . venv/bin/activate; pip3 install --no-cache-dir torchvision==0.5.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
EOF


case $1 in

local)
cat > Dockerfile <<EOF
FROM tensorcomtest-base
ENV SHELL=/bin/bash
COPY . /tmp/tensorcom
WORKDIR /tmp/tensorcom
RUN ls -l
RUN ln -s /tmp/venv .
RUN . venv/bin/activate; pip install --no-cache-dir pytest
RUN . venv/bin/activate; pip install --no-cache-dir -r requirements.txt
RUN . venv/bin/activate; python3 -m pytest
EOF
docker build -t tensorcomtest .
rm -f Dockerfile
;;

git)
docker build -t tensorcomtest --no-cache - <<EOF
FROM tensorcomtest-base
ENV SHELL=/bin/bash
RUN git clone https://git@github.com/NVLabs/tensorcom.git /tmp/tensorcom
WORKDIR /tmp/tensorcom
RUN ln -s /tmp/venv .
RUN . venv/bin/activate; pip install --no-cache-dir pytest
RUN . venv/bin/activate; pip install --no-cache-dir -r requirements.txt
RUN . venv/bin/activate; python3 -m pytest
EOF
;;

package)
cd dist
cat > Dockerfile <<EOF
FROM tensorcomtest-base
ENV SHELL=/bin/bash
RUN git clone https://git@github.com/NVLabs/tensorcom.git /tmp/tensorcom
RUN mkdir /tmp/work
RUN cp -av /tmp/tensorcom/test* /tmp/work/.
WORKDIR /tmp/work
RUN ln -s /tmp/venv .
RUN . venv/bin/activate; pip install --no-cache-dir pytest
#RUN . venv/bin/activate; pip install --no-cache-dir tensorcom
#RUN . venv/bin/activate; pip install https://tmb-testreleases.storage.googleapis.com/tensorcom-latest-py3-none-any.whl
ADD tensorcom-*.whl /tmp
RUN . venv/bin/activate; pip install --no-cache-dir /tmp/tensorcom-*-py3-none-any.whl
RUN . venv/bin/activate; python3 -m pytest
EOF
docker build -t tensorcomtest .
rm -f Dockerfile
;;

pip)
docker build -t tensorcomtest --no-cache - <<EOF
FROM tensorcomtest-base
ENV SHELL=/bin/bash
RUN git clone https://git@github.com/NVLabs/tensorcom.git /tmp/tensorcom
RUN mkdir /tmp/work
RUN cp -av /tmp/tensorcom/test* /tmp/work/.
WORKDIR /tmp/work
RUN ln -s /tmp/venv .
RUN . venv/bin/activate; pip install --no-cache-dir pytest
RUN . venv/bin/activate; pip install --no-cache-dir tensorcom
#RUN . venv/bin/activate; pip install https://tmb-testreleases.storage.googleapis.com/tensorcom-latest-py3-none-any.whl
#RUN . venv/bin/activate; python3 -m pytest
EOF
;;

*)
echo "$1: must specify either pip or git"
exit 1
;;

esac
